<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为 WARN，则低于 WARN 的信息都不会输出 -->
<!-- scan：当此属性设置为 true 时，配置文档如果发生改变，将会被重新加载，默认值为 true -->
<!-- scanPeriod：设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。 -->
<!-- debug：当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false -->
<configuration  scan="true" scanPeriod="10 seconds">
    <contextName>logback-spring</contextName>

    <!-- name 的值是变量的名称，value 的值时变量定义的值。通过定义的值会被插入到 logger 上下文中。定义后，可以使 ${} 来使用变量。 -->
    <!-- 如果是 Windows，则 value="D:/logs" 类似 -->
    <property name="logging.path" value="E:/logs" />
    <!-- 当天日志的文件名 -->
    <property name="logFile.name" value="bx" />
    <!-- 时间归档日志的文件名 -->
    <property name="logDateFile.name" value="bx" />

    <!--0. 日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.CTT}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--1. 输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志 appender 是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--2. 输出到文档-->
    <!-- 2.1 level 为 DEBUG 日志，按时间滚动输出  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/${logFile.name}_debug.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${logging.path}/${logDateFile.name}_debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize：这是活动文件的大小，默认值是 10MB -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录 DEBUG 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.2 level 为 INFO 日志，时间滚动输出  -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/${logFile.name}_info.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.path}/${logDateFile.name}_info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize：这是活动文件的大小，默认值是 10MB -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录 INFO 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.3 level为 WARN 日志，时间滚动输出  -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/${logFile.name}_warn.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logging.path}/${logDateFile.name}_warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize：这是活动文件的大小，默认值是 10MB -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录 WARN 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.4 level为 ERROR 日志，时间滚动输出  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/${logFile.name}_error.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logging.path}/${logDateFile.name}_error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize：这是活动文件的大小，默认值是 10MB -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录 ERROR 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    
    <!-- 
        File 标签是日志文件的输出地址：必须要为 ${LOG_PATH}/${LOG_FILE}。
        level 标签：如果设置了 level 为 info，只会输出 info 的日志信息，其他日志级别的日志就会过滤掉，
                   appender 的 level 标签优先级最高，如果指定了，则其他标签的 level 将会失效。
    -->

    <!--
        <logger> 用来设置某一个包或者具体的某一个类的日志打印级别，以及指定 <appender>。
        <logger> 仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性。
        name：用来指定受此 logger 约束的某一个包或者具体的某一个类。
        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值 INHERITED 或者同义词 NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前 logger 将会继承上级的级别（appender 里指定的），
              优先级高于 root 的 level，低于 appender 的 level。
        addtivity：是否传递打印信息给上级的其他的 logger 或者 root 节点。默认是 true。
                   为 ture，意思是日志级别高的其他 logger 或 root 都会捕获到该 looger 的日志信息，并「给自己」进行日志输出。
            例子：
            <logger name="org.springframework.web" level="info"/>
            <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
            <logger name="你的 controller 包路径" level="debug"/>
        
        注意 logger 里的 level 是一个下限，比其日志级别高的日志信息也会输出。
    -->

    <!--
        使用 mybatis 的时候，sql 语句是 debug 下才会打印，而这里我们只配置了 info，所以想要查看 sql 语句的话，有以下两种操作：
        第一种把 <root level="info"> 改成 <root level="DEBUG">，这样就会打印 sql，不过这样日志那边会出现很多其他消息。
        第二种就是单独给 dao 层下目录配置 debug 模式，这样配置 sql 语句会打印，其他还是正常 info 级别：
        XML 文件配置：
            全局配置（可选）
                <logger name="com.apache.ibatis" level="DEBUG"/>
                <logger name="java.sql.Connection" level="DEBUG"/>
                <logger name="java.sql.Statement" level="DEBUG"/>
                <logger name="java.sql.PreparedStatement" level="DEBUG"/>
            包名配置（建议）
                <logger name="com.xxx.dao" level="DEBUG"/>
        
        properties 文件配置：
            全局配置（可选）
                logging.level.org.apache.ibatis=DEBUG
                logging.level.org.mybatis=DEBUG
                logging.level.java.sql.Connection=DEBUG
                logging.level.java.sql.Statement=DEBUG 
            包名配置（建议）
                logging.level.com.xxx.dao=debug
        
        注意：com.xxx.dao 是你的包名。
     -->

    <!--
        root 节点是必选节点，用来指定最基础的日志输出级别，只有一个 level 属性。
        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
               不能设置为 INHERITED 或者同义词 NULL。默认是 DEBUG，不设置 level 不会输出到文件。
               可以包含零个或多个元素，标识这个 appender 将会添加到这个 logger。
               其输出会受到 logger 的影响，即注意 logger 中的 additivity 属性，如果为 false，则指定的包名下的日志不会输出。
    -->

    <!-- 4. 最终的策略 -->
    <!-- 4.1 开发环境：打印控制台-->
    <springProfile name="dev">
        <!-- 修改此处的扫描包名，指定这个包的日志级别最低下限 -->
        <logger name="com.glyxybxhtxt.controller" level="debug"/>
        <!-- logger 的 level 是一个下限，所有大于这个下限的日志级别都会输出 -->
    </springProfile>

    <!-- 
        因为 logger 指定了 level 的下限和 addtivity 默认为 true ，所以 root 的 level 可以不写。
        root 能捕获 level 低的 logger 的日志信息，是因为 addtivity 为 true，从而导致 logger 的 level 优先级比 root 高。
     -->
    <root level="info">
        <!-- 
            appender-ref 是 appender 的引用。
            如果 appender 里指定了 level，则只按照 appender 里的 level 进行输出。
         -->
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="DEBUG_FILE" />
        <appender-ref ref="INFO_FILE" />
        <appender-ref ref="WARN_FILE" />
        <appender-ref ref="ERROR_FILE" />
    </root>

    <!-- 4.2 生产环境:输出到文档
    <springProfile name="pro">
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
            <appender-ref ref="WARN_FILE" />
        </root>
    </springProfile> -->
</configuration>

<!-- level 优先级：appender > logger > root -->

<!-- 修改日志输出目录，输出日志大小，项目指定扫描包即可使用 -->